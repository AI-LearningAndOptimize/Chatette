\                   escape reserved symbols
;                   comments

[]                  word group
~[]                 alias
%[]                 intent (generate them all)
%[](2)              intent (with number of generations asked)
@[]                 slot

[name#precision]    identifier of the word group is `name` but gives a `precision`
                    for a word group: ignore `precision`
                    for an alias: consider that the identifier is `name` => ~[name] identifies every ~[name#anything]
                    for an intent: ignore `precision`
                    for a slot: `name` is the slot identifier but `precision` maps to different values (same as alias)
[any?]              word group `any` has 50% chance of being generated
[any?id]            generation of `any` is identified as `id` and any word group with generation identified the same will be generated iff `any` was generated
[any?!id]           `any` cannot be generated at the same time as another unit marked `id` TODO
[any?/60]           word group `any` has 60% chance of being generated
[any?id/70]         id.
[any#precision?id/20]
[&name]             `name` will be generated starting with a lowercase or uppercase letter (50% chance) /!\ not usable in a top declaration

... = slot_value    inside a slot declaration, when generating the string `...` for the slot, it will give it the value name `slot value` (everything that comes after `=` lstriped)
                    if slot_value is "/", then the generated text will be the value

|path/to/file       include the contents of that file inside the current file with the same indentation as this line (only as a top-level line)

{~[some]/words to/~[choose]}  generate one of the units joined by '/'

~[machine name$ARG]
  the $ARG machine
  the machine named $ARG
  ARG are escapable
                    arguments exist only for units (except word groups)
